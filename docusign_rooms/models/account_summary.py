# coding: utf-8

"""
    DocuSign Rooms API - v2

    An API for an integrator to access the features of DocuSign Rooms  # noqa: E501

    OpenAPI spec version: v2
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AccountSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'company_id': 'int',
        'name': 'str',
        'company_version': 'ProductVersion',
        'docu_sign_account_guid': 'str',
        'default_field_set_id': 'str',
        'require_office_library_assignments': 'bool'
    }

    attribute_map = {
        'company_id': 'companyId',
        'name': 'name',
        'company_version': 'companyVersion',
        'docu_sign_account_guid': 'docuSignAccountGuid',
        'default_field_set_id': 'defaultFieldSetId',
        'require_office_library_assignments': 'requireOfficeLibraryAssignments'
    }

    def __init__(self, company_id=None, name=None, company_version=None, docu_sign_account_guid=None, default_field_set_id=None, require_office_library_assignments=None):  # noqa: E501
        """AccountSummary - a model defined in Swagger"""  # noqa: E501

        self._company_id = None
        self._name = None
        self._company_version = None
        self._docu_sign_account_guid = None
        self._default_field_set_id = None
        self._require_office_library_assignments = None
        self.discriminator = None

        if company_id is not None:
            self.company_id = company_id
        if name is not None:
            self.name = name
        if company_version is not None:
            self.company_version = company_version
        if docu_sign_account_guid is not None:
            self.docu_sign_account_guid = docu_sign_account_guid
        if default_field_set_id is not None:
            self.default_field_set_id = default_field_set_id
        if require_office_library_assignments is not None:
            self.require_office_library_assignments = require_office_library_assignments

    @property
    def company_id(self):
        """Gets the company_id of this AccountSummary.  # noqa: E501


        :return: The company_id of this AccountSummary.  # noqa: E501
        :rtype: int
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this AccountSummary.


        :param company_id: The company_id of this AccountSummary.  # noqa: E501
        :type: int
        """

        self._company_id = company_id

    @property
    def name(self):
        """Gets the name of this AccountSummary.  # noqa: E501


        :return: The name of this AccountSummary.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AccountSummary.


        :param name: The name of this AccountSummary.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def company_version(self):
        """Gets the company_version of this AccountSummary.  # noqa: E501


        :return: The company_version of this AccountSummary.  # noqa: E501
        :rtype: ProductVersion
        """
        return self._company_version

    @company_version.setter
    def company_version(self, company_version):
        """Sets the company_version of this AccountSummary.


        :param company_version: The company_version of this AccountSummary.  # noqa: E501
        :type: ProductVersion
        """

        self._company_version = company_version

    @property
    def docu_sign_account_guid(self):
        """Gets the docu_sign_account_guid of this AccountSummary.  # noqa: E501


        :return: The docu_sign_account_guid of this AccountSummary.  # noqa: E501
        :rtype: str
        """
        return self._docu_sign_account_guid

    @docu_sign_account_guid.setter
    def docu_sign_account_guid(self, docu_sign_account_guid):
        """Sets the docu_sign_account_guid of this AccountSummary.


        :param docu_sign_account_guid: The docu_sign_account_guid of this AccountSummary.  # noqa: E501
        :type: str
        """

        self._docu_sign_account_guid = docu_sign_account_guid

    @property
    def default_field_set_id(self):
        """Gets the default_field_set_id of this AccountSummary.  # noqa: E501


        :return: The default_field_set_id of this AccountSummary.  # noqa: E501
        :rtype: str
        """
        return self._default_field_set_id

    @default_field_set_id.setter
    def default_field_set_id(self, default_field_set_id):
        """Sets the default_field_set_id of this AccountSummary.


        :param default_field_set_id: The default_field_set_id of this AccountSummary.  # noqa: E501
        :type: str
        """

        self._default_field_set_id = default_field_set_id

    @property
    def require_office_library_assignments(self):
        """Gets the require_office_library_assignments of this AccountSummary.  # noqa: E501


        :return: The require_office_library_assignments of this AccountSummary.  # noqa: E501
        :rtype: bool
        """
        return self._require_office_library_assignments

    @require_office_library_assignments.setter
    def require_office_library_assignments(self, require_office_library_assignments):
        """Sets the require_office_library_assignments of this AccountSummary.


        :param require_office_library_assignments: The require_office_library_assignments of this AccountSummary.  # noqa: E501
        :type: bool
        """

        self._require_office_library_assignments = require_office_library_assignments

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
