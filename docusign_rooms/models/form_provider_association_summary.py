# coding: utf-8

"""
    DocuSign Rooms API - v2

    An API for an integrator to access the features of DocuSign Rooms  # noqa: E501

    OpenAPI spec version: v2
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_rooms.client.configuration import Configuration


class FormProviderAssociationSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'association_id': 'str',
        'provider_id': 'str',
        'last_update_date': 'datetime',
        'form_provider_association_guid': 'str',
        'form_provider_association_name': 'str'
    }

    attribute_map = {
        'association_id': 'associationId',
        'provider_id': 'providerId',
        'last_update_date': 'lastUpdateDate',
        'form_provider_association_guid': 'formProviderAssociationGuid',
        'form_provider_association_name': 'formProviderAssociationName'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """FormProviderAssociationSummary - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._association_id = None
        self._provider_id = None
        self._last_update_date = None
        self._form_provider_association_guid = None
        self._form_provider_association_name = None
        self.discriminator = None

        setattr(self, "_{}".format('association_id'), kwargs.get('association_id', None))
        setattr(self, "_{}".format('provider_id'), kwargs.get('provider_id', None))
        setattr(self, "_{}".format('last_update_date'), kwargs.get('last_update_date', None))
        setattr(self, "_{}".format('form_provider_association_guid'), kwargs.get('form_provider_association_guid', None))
        setattr(self, "_{}".format('form_provider_association_name'), kwargs.get('form_provider_association_name', None))

    @property
    def association_id(self):
        """Gets the association_id of this FormProviderAssociationSummary.  # noqa: E501


        :return: The association_id of this FormProviderAssociationSummary.  # noqa: E501
        :rtype: str
        """
        return self._association_id

    @association_id.setter
    def association_id(self, association_id):
        """Sets the association_id of this FormProviderAssociationSummary.


        :param association_id: The association_id of this FormProviderAssociationSummary.  # noqa: E501
        :type: str
        """

        self._association_id = association_id

    @property
    def provider_id(self):
        """Gets the provider_id of this FormProviderAssociationSummary.  # noqa: E501


        :return: The provider_id of this FormProviderAssociationSummary.  # noqa: E501
        :rtype: str
        """
        return self._provider_id

    @provider_id.setter
    def provider_id(self, provider_id):
        """Sets the provider_id of this FormProviderAssociationSummary.


        :param provider_id: The provider_id of this FormProviderAssociationSummary.  # noqa: E501
        :type: str
        """

        self._provider_id = provider_id

    @property
    def last_update_date(self):
        """Gets the last_update_date of this FormProviderAssociationSummary.  # noqa: E501


        :return: The last_update_date of this FormProviderAssociationSummary.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update_date

    @last_update_date.setter
    def last_update_date(self, last_update_date):
        """Sets the last_update_date of this FormProviderAssociationSummary.


        :param last_update_date: The last_update_date of this FormProviderAssociationSummary.  # noqa: E501
        :type: datetime
        """

        self._last_update_date = last_update_date

    @property
    def form_provider_association_guid(self):
        """Gets the form_provider_association_guid of this FormProviderAssociationSummary.  # noqa: E501


        :return: The form_provider_association_guid of this FormProviderAssociationSummary.  # noqa: E501
        :rtype: str
        """
        return self._form_provider_association_guid

    @form_provider_association_guid.setter
    def form_provider_association_guid(self, form_provider_association_guid):
        """Sets the form_provider_association_guid of this FormProviderAssociationSummary.


        :param form_provider_association_guid: The form_provider_association_guid of this FormProviderAssociationSummary.  # noqa: E501
        :type: str
        """

        self._form_provider_association_guid = form_provider_association_guid

    @property
    def form_provider_association_name(self):
        """Gets the form_provider_association_name of this FormProviderAssociationSummary.  # noqa: E501


        :return: The form_provider_association_name of this FormProviderAssociationSummary.  # noqa: E501
        :rtype: str
        """
        return self._form_provider_association_name

    @form_provider_association_name.setter
    def form_provider_association_name(self, form_provider_association_name):
        """Sets the form_provider_association_name of this FormProviderAssociationSummary.


        :param form_provider_association_name: The form_provider_association_name of this FormProviderAssociationSummary.  # noqa: E501
        :type: str
        """

        self._form_provider_association_name = form_provider_association_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FormProviderAssociationSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FormProviderAssociationSummary):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FormProviderAssociationSummary):
            return True

        return self.to_dict() != other.to_dict()
