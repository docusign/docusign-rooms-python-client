# coding: utf-8

"""
    DocuSign Rooms API - v2

    An API for an integrator to access the features of DocuSign Rooms  # noqa: E501

    OpenAPI spec version: v2
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TaskListSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'task_list_id': 'int',
        'name': 'str',
        'task_list_template_id': 'int',
        'submitted_for_review_date': 'datetime',
        'approval_date': 'datetime',
        'rejected_date': 'datetime',
        'created_date': 'datetime',
        'approved_by_user_id': 'int',
        'rejected_by_user_id': 'int',
        'comment': 'str'
    }

    attribute_map = {
        'task_list_id': 'taskListId',
        'name': 'name',
        'task_list_template_id': 'taskListTemplateId',
        'submitted_for_review_date': 'submittedForReviewDate',
        'approval_date': 'approvalDate',
        'rejected_date': 'rejectedDate',
        'created_date': 'createdDate',
        'approved_by_user_id': 'approvedByUserId',
        'rejected_by_user_id': 'rejectedByUserId',
        'comment': 'comment'
    }

    def __init__(self, task_list_id=None, name=None, task_list_template_id=None, submitted_for_review_date=None, approval_date=None, rejected_date=None, created_date=None, approved_by_user_id=None, rejected_by_user_id=None, comment=None):  # noqa: E501
        """TaskListSummary - a model defined in Swagger"""  # noqa: E501

        self._task_list_id = None
        self._name = None
        self._task_list_template_id = None
        self._submitted_for_review_date = None
        self._approval_date = None
        self._rejected_date = None
        self._created_date = None
        self._approved_by_user_id = None
        self._rejected_by_user_id = None
        self._comment = None
        self.discriminator = None

        if task_list_id is not None:
            self.task_list_id = task_list_id
        if name is not None:
            self.name = name
        if task_list_template_id is not None:
            self.task_list_template_id = task_list_template_id
        if submitted_for_review_date is not None:
            self.submitted_for_review_date = submitted_for_review_date
        if approval_date is not None:
            self.approval_date = approval_date
        if rejected_date is not None:
            self.rejected_date = rejected_date
        if created_date is not None:
            self.created_date = created_date
        if approved_by_user_id is not None:
            self.approved_by_user_id = approved_by_user_id
        if rejected_by_user_id is not None:
            self.rejected_by_user_id = rejected_by_user_id
        if comment is not None:
            self.comment = comment

    @property
    def task_list_id(self):
        """Gets the task_list_id of this TaskListSummary.  # noqa: E501


        :return: The task_list_id of this TaskListSummary.  # noqa: E501
        :rtype: int
        """
        return self._task_list_id

    @task_list_id.setter
    def task_list_id(self, task_list_id):
        """Sets the task_list_id of this TaskListSummary.


        :param task_list_id: The task_list_id of this TaskListSummary.  # noqa: E501
        :type: int
        """

        self._task_list_id = task_list_id

    @property
    def name(self):
        """Gets the name of this TaskListSummary.  # noqa: E501


        :return: The name of this TaskListSummary.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TaskListSummary.


        :param name: The name of this TaskListSummary.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def task_list_template_id(self):
        """Gets the task_list_template_id of this TaskListSummary.  # noqa: E501


        :return: The task_list_template_id of this TaskListSummary.  # noqa: E501
        :rtype: int
        """
        return self._task_list_template_id

    @task_list_template_id.setter
    def task_list_template_id(self, task_list_template_id):
        """Sets the task_list_template_id of this TaskListSummary.


        :param task_list_template_id: The task_list_template_id of this TaskListSummary.  # noqa: E501
        :type: int
        """

        self._task_list_template_id = task_list_template_id

    @property
    def submitted_for_review_date(self):
        """Gets the submitted_for_review_date of this TaskListSummary.  # noqa: E501


        :return: The submitted_for_review_date of this TaskListSummary.  # noqa: E501
        :rtype: datetime
        """
        return self._submitted_for_review_date

    @submitted_for_review_date.setter
    def submitted_for_review_date(self, submitted_for_review_date):
        """Sets the submitted_for_review_date of this TaskListSummary.


        :param submitted_for_review_date: The submitted_for_review_date of this TaskListSummary.  # noqa: E501
        :type: datetime
        """

        self._submitted_for_review_date = submitted_for_review_date

    @property
    def approval_date(self):
        """Gets the approval_date of this TaskListSummary.  # noqa: E501


        :return: The approval_date of this TaskListSummary.  # noqa: E501
        :rtype: datetime
        """
        return self._approval_date

    @approval_date.setter
    def approval_date(self, approval_date):
        """Sets the approval_date of this TaskListSummary.


        :param approval_date: The approval_date of this TaskListSummary.  # noqa: E501
        :type: datetime
        """

        self._approval_date = approval_date

    @property
    def rejected_date(self):
        """Gets the rejected_date of this TaskListSummary.  # noqa: E501


        :return: The rejected_date of this TaskListSummary.  # noqa: E501
        :rtype: datetime
        """
        return self._rejected_date

    @rejected_date.setter
    def rejected_date(self, rejected_date):
        """Sets the rejected_date of this TaskListSummary.


        :param rejected_date: The rejected_date of this TaskListSummary.  # noqa: E501
        :type: datetime
        """

        self._rejected_date = rejected_date

    @property
    def created_date(self):
        """Gets the created_date of this TaskListSummary.  # noqa: E501


        :return: The created_date of this TaskListSummary.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this TaskListSummary.


        :param created_date: The created_date of this TaskListSummary.  # noqa: E501
        :type: datetime
        """

        self._created_date = created_date

    @property
    def approved_by_user_id(self):
        """Gets the approved_by_user_id of this TaskListSummary.  # noqa: E501


        :return: The approved_by_user_id of this TaskListSummary.  # noqa: E501
        :rtype: int
        """
        return self._approved_by_user_id

    @approved_by_user_id.setter
    def approved_by_user_id(self, approved_by_user_id):
        """Sets the approved_by_user_id of this TaskListSummary.


        :param approved_by_user_id: The approved_by_user_id of this TaskListSummary.  # noqa: E501
        :type: int
        """

        self._approved_by_user_id = approved_by_user_id

    @property
    def rejected_by_user_id(self):
        """Gets the rejected_by_user_id of this TaskListSummary.  # noqa: E501


        :return: The rejected_by_user_id of this TaskListSummary.  # noqa: E501
        :rtype: int
        """
        return self._rejected_by_user_id

    @rejected_by_user_id.setter
    def rejected_by_user_id(self, rejected_by_user_id):
        """Sets the rejected_by_user_id of this TaskListSummary.


        :param rejected_by_user_id: The rejected_by_user_id of this TaskListSummary.  # noqa: E501
        :type: int
        """

        self._rejected_by_user_id = rejected_by_user_id

    @property
    def comment(self):
        """Gets the comment of this TaskListSummary.  # noqa: E501


        :return: The comment of this TaskListSummary.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this TaskListSummary.


        :param comment: The comment of this TaskListSummary.  # noqa: E501
        :type: str
        """

        self._comment = comment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaskListSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskListSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
