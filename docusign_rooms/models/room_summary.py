# coding: utf-8

"""
    DocuSign Rooms API - v2

    An API for an integrator to access the features of DocuSign Rooms  # noqa: E501

    OpenAPI spec version: v2
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RoomSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'room_id': 'int',
        'name': 'str',
        'office_id': 'int',
        'created_date': 'datetime',
        'submitted_for_review_date': 'datetime',
        'closed_date': 'datetime',
        'rejected_date': 'datetime',
        'created_by_user_id': 'int',
        'rejected_by_user_id': 'int',
        'closed_status_id': 'str',
        'field_data_last_updated_date': 'datetime'
    }

    attribute_map = {
        'room_id': 'roomId',
        'name': 'name',
        'office_id': 'officeId',
        'created_date': 'createdDate',
        'submitted_for_review_date': 'submittedForReviewDate',
        'closed_date': 'closedDate',
        'rejected_date': 'rejectedDate',
        'created_by_user_id': 'createdByUserId',
        'rejected_by_user_id': 'rejectedByUserId',
        'closed_status_id': 'closedStatusId',
        'field_data_last_updated_date': 'fieldDataLastUpdatedDate'
    }

    def __init__(self, room_id=None, name=None, office_id=None, created_date=None, submitted_for_review_date=None, closed_date=None, rejected_date=None, created_by_user_id=None, rejected_by_user_id=None, closed_status_id=None, field_data_last_updated_date=None):  # noqa: E501
        """RoomSummary - a model defined in Swagger"""  # noqa: E501

        self._room_id = None
        self._name = None
        self._office_id = None
        self._created_date = None
        self._submitted_for_review_date = None
        self._closed_date = None
        self._rejected_date = None
        self._created_by_user_id = None
        self._rejected_by_user_id = None
        self._closed_status_id = None
        self._field_data_last_updated_date = None
        self.discriminator = None

        if room_id is not None:
            self.room_id = room_id
        if name is not None:
            self.name = name
        if office_id is not None:
            self.office_id = office_id
        if created_date is not None:
            self.created_date = created_date
        if submitted_for_review_date is not None:
            self.submitted_for_review_date = submitted_for_review_date
        if closed_date is not None:
            self.closed_date = closed_date
        if rejected_date is not None:
            self.rejected_date = rejected_date
        if created_by_user_id is not None:
            self.created_by_user_id = created_by_user_id
        if rejected_by_user_id is not None:
            self.rejected_by_user_id = rejected_by_user_id
        if closed_status_id is not None:
            self.closed_status_id = closed_status_id
        if field_data_last_updated_date is not None:
            self.field_data_last_updated_date = field_data_last_updated_date

    @property
    def room_id(self):
        """Gets the room_id of this RoomSummary.  # noqa: E501


        :return: The room_id of this RoomSummary.  # noqa: E501
        :rtype: int
        """
        return self._room_id

    @room_id.setter
    def room_id(self, room_id):
        """Sets the room_id of this RoomSummary.


        :param room_id: The room_id of this RoomSummary.  # noqa: E501
        :type: int
        """

        self._room_id = room_id

    @property
    def name(self):
        """Gets the name of this RoomSummary.  # noqa: E501


        :return: The name of this RoomSummary.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RoomSummary.


        :param name: The name of this RoomSummary.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def office_id(self):
        """Gets the office_id of this RoomSummary.  # noqa: E501


        :return: The office_id of this RoomSummary.  # noqa: E501
        :rtype: int
        """
        return self._office_id

    @office_id.setter
    def office_id(self, office_id):
        """Sets the office_id of this RoomSummary.


        :param office_id: The office_id of this RoomSummary.  # noqa: E501
        :type: int
        """

        self._office_id = office_id

    @property
    def created_date(self):
        """Gets the created_date of this RoomSummary.  # noqa: E501


        :return: The created_date of this RoomSummary.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this RoomSummary.


        :param created_date: The created_date of this RoomSummary.  # noqa: E501
        :type: datetime
        """

        self._created_date = created_date

    @property
    def submitted_for_review_date(self):
        """Gets the submitted_for_review_date of this RoomSummary.  # noqa: E501


        :return: The submitted_for_review_date of this RoomSummary.  # noqa: E501
        :rtype: datetime
        """
        return self._submitted_for_review_date

    @submitted_for_review_date.setter
    def submitted_for_review_date(self, submitted_for_review_date):
        """Sets the submitted_for_review_date of this RoomSummary.


        :param submitted_for_review_date: The submitted_for_review_date of this RoomSummary.  # noqa: E501
        :type: datetime
        """

        self._submitted_for_review_date = submitted_for_review_date

    @property
    def closed_date(self):
        """Gets the closed_date of this RoomSummary.  # noqa: E501


        :return: The closed_date of this RoomSummary.  # noqa: E501
        :rtype: datetime
        """
        return self._closed_date

    @closed_date.setter
    def closed_date(self, closed_date):
        """Sets the closed_date of this RoomSummary.


        :param closed_date: The closed_date of this RoomSummary.  # noqa: E501
        :type: datetime
        """

        self._closed_date = closed_date

    @property
    def rejected_date(self):
        """Gets the rejected_date of this RoomSummary.  # noqa: E501


        :return: The rejected_date of this RoomSummary.  # noqa: E501
        :rtype: datetime
        """
        return self._rejected_date

    @rejected_date.setter
    def rejected_date(self, rejected_date):
        """Sets the rejected_date of this RoomSummary.


        :param rejected_date: The rejected_date of this RoomSummary.  # noqa: E501
        :type: datetime
        """

        self._rejected_date = rejected_date

    @property
    def created_by_user_id(self):
        """Gets the created_by_user_id of this RoomSummary.  # noqa: E501


        :return: The created_by_user_id of this RoomSummary.  # noqa: E501
        :rtype: int
        """
        return self._created_by_user_id

    @created_by_user_id.setter
    def created_by_user_id(self, created_by_user_id):
        """Sets the created_by_user_id of this RoomSummary.


        :param created_by_user_id: The created_by_user_id of this RoomSummary.  # noqa: E501
        :type: int
        """

        self._created_by_user_id = created_by_user_id

    @property
    def rejected_by_user_id(self):
        """Gets the rejected_by_user_id of this RoomSummary.  # noqa: E501


        :return: The rejected_by_user_id of this RoomSummary.  # noqa: E501
        :rtype: int
        """
        return self._rejected_by_user_id

    @rejected_by_user_id.setter
    def rejected_by_user_id(self, rejected_by_user_id):
        """Sets the rejected_by_user_id of this RoomSummary.


        :param rejected_by_user_id: The rejected_by_user_id of this RoomSummary.  # noqa: E501
        :type: int
        """

        self._rejected_by_user_id = rejected_by_user_id

    @property
    def closed_status_id(self):
        """Gets the closed_status_id of this RoomSummary.  # noqa: E501


        :return: The closed_status_id of this RoomSummary.  # noqa: E501
        :rtype: str
        """
        return self._closed_status_id

    @closed_status_id.setter
    def closed_status_id(self, closed_status_id):
        """Sets the closed_status_id of this RoomSummary.


        :param closed_status_id: The closed_status_id of this RoomSummary.  # noqa: E501
        :type: str
        """

        self._closed_status_id = closed_status_id

    @property
    def field_data_last_updated_date(self):
        """Gets the field_data_last_updated_date of this RoomSummary.  # noqa: E501


        :return: The field_data_last_updated_date of this RoomSummary.  # noqa: E501
        :rtype: datetime
        """
        return self._field_data_last_updated_date

    @field_data_last_updated_date.setter
    def field_data_last_updated_date(self, field_data_last_updated_date):
        """Sets the field_data_last_updated_date of this RoomSummary.


        :param field_data_last_updated_date: The field_data_last_updated_date of this RoomSummary.  # noqa: E501
        :type: datetime
        """

        self._field_data_last_updated_date = field_data_last_updated_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RoomSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RoomSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
