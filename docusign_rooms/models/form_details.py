# coding: utf-8

"""
    DocuSign Rooms API - v2

    An API for an integrator to access the features of DocuSign Rooms  # noqa: E501

    OpenAPI spec version: v2
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class FormDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'form_id': 'str',
        'name': 'str',
        'created_date': 'datetime',
        'last_updated_date': 'datetime',
        'available_on_date': 'datetime',
        'owner_name': 'str',
        'version': 'str',
        'number_of_pages': 'int'
    }

    attribute_map = {
        'form_id': 'formId',
        'name': 'name',
        'created_date': 'createdDate',
        'last_updated_date': 'lastUpdatedDate',
        'available_on_date': 'availableOnDate',
        'owner_name': 'ownerName',
        'version': 'version',
        'number_of_pages': 'numberOfPages'
    }

    def __init__(self, form_id=None, name=None, created_date=None, last_updated_date=None, available_on_date=None, owner_name=None, version=None, number_of_pages=None):  # noqa: E501
        """FormDetails - a model defined in Swagger"""  # noqa: E501

        self._form_id = None
        self._name = None
        self._created_date = None
        self._last_updated_date = None
        self._available_on_date = None
        self._owner_name = None
        self._version = None
        self._number_of_pages = None
        self.discriminator = None

        if form_id is not None:
            self.form_id = form_id
        if name is not None:
            self.name = name
        if created_date is not None:
            self.created_date = created_date
        if last_updated_date is not None:
            self.last_updated_date = last_updated_date
        if available_on_date is not None:
            self.available_on_date = available_on_date
        if owner_name is not None:
            self.owner_name = owner_name
        if version is not None:
            self.version = version
        if number_of_pages is not None:
            self.number_of_pages = number_of_pages

    @property
    def form_id(self):
        """Gets the form_id of this FormDetails.  # noqa: E501


        :return: The form_id of this FormDetails.  # noqa: E501
        :rtype: str
        """
        return self._form_id

    @form_id.setter
    def form_id(self, form_id):
        """Sets the form_id of this FormDetails.


        :param form_id: The form_id of this FormDetails.  # noqa: E501
        :type: str
        """

        self._form_id = form_id

    @property
    def name(self):
        """Gets the name of this FormDetails.  # noqa: E501


        :return: The name of this FormDetails.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FormDetails.


        :param name: The name of this FormDetails.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def created_date(self):
        """Gets the created_date of this FormDetails.  # noqa: E501


        :return: The created_date of this FormDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this FormDetails.


        :param created_date: The created_date of this FormDetails.  # noqa: E501
        :type: datetime
        """

        self._created_date = created_date

    @property
    def last_updated_date(self):
        """Gets the last_updated_date of this FormDetails.  # noqa: E501


        :return: The last_updated_date of this FormDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated_date

    @last_updated_date.setter
    def last_updated_date(self, last_updated_date):
        """Sets the last_updated_date of this FormDetails.


        :param last_updated_date: The last_updated_date of this FormDetails.  # noqa: E501
        :type: datetime
        """

        self._last_updated_date = last_updated_date

    @property
    def available_on_date(self):
        """Gets the available_on_date of this FormDetails.  # noqa: E501


        :return: The available_on_date of this FormDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._available_on_date

    @available_on_date.setter
    def available_on_date(self, available_on_date):
        """Sets the available_on_date of this FormDetails.


        :param available_on_date: The available_on_date of this FormDetails.  # noqa: E501
        :type: datetime
        """

        self._available_on_date = available_on_date

    @property
    def owner_name(self):
        """Gets the owner_name of this FormDetails.  # noqa: E501


        :return: The owner_name of this FormDetails.  # noqa: E501
        :rtype: str
        """
        return self._owner_name

    @owner_name.setter
    def owner_name(self, owner_name):
        """Sets the owner_name of this FormDetails.


        :param owner_name: The owner_name of this FormDetails.  # noqa: E501
        :type: str
        """

        self._owner_name = owner_name

    @property
    def version(self):
        """Gets the version of this FormDetails.  # noqa: E501


        :return: The version of this FormDetails.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this FormDetails.


        :param version: The version of this FormDetails.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def number_of_pages(self):
        """Gets the number_of_pages of this FormDetails.  # noqa: E501


        :return: The number_of_pages of this FormDetails.  # noqa: E501
        :rtype: int
        """
        return self._number_of_pages

    @number_of_pages.setter
    def number_of_pages(self, number_of_pages):
        """Sets the number_of_pages of this FormDetails.


        :param number_of_pages: The number_of_pages of this FormDetails.  # noqa: E501
        :type: int
        """

        self._number_of_pages = number_of_pages

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FormDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FormDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
