# coding: utf-8

"""
    DocuSign Rooms API - v2

    An API for an integrator to access the features of DocuSign Rooms  # noqa: E501

    OpenAPI spec version: v2
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class FormSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'library_form_id': 'str',
        'name': 'str',
        'last_updated_date': 'datetime'
    }

    attribute_map = {
        'library_form_id': 'libraryFormId',
        'name': 'name',
        'last_updated_date': 'lastUpdatedDate'
    }

    def __init__(self, library_form_id=None, name=None, last_updated_date=None):  # noqa: E501
        """FormSummary - a model defined in Swagger"""  # noqa: E501

        self._library_form_id = None
        self._name = None
        self._last_updated_date = None
        self.discriminator = None

        if library_form_id is not None:
            self.library_form_id = library_form_id
        if name is not None:
            self.name = name
        if last_updated_date is not None:
            self.last_updated_date = last_updated_date

    @property
    def library_form_id(self):
        """Gets the library_form_id of this FormSummary.  # noqa: E501


        :return: The library_form_id of this FormSummary.  # noqa: E501
        :rtype: str
        """
        return self._library_form_id

    @library_form_id.setter
    def library_form_id(self, library_form_id):
        """Sets the library_form_id of this FormSummary.


        :param library_form_id: The library_form_id of this FormSummary.  # noqa: E501
        :type: str
        """

        self._library_form_id = library_form_id

    @property
    def name(self):
        """Gets the name of this FormSummary.  # noqa: E501


        :return: The name of this FormSummary.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FormSummary.


        :param name: The name of this FormSummary.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def last_updated_date(self):
        """Gets the last_updated_date of this FormSummary.  # noqa: E501


        :return: The last_updated_date of this FormSummary.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated_date

    @last_updated_date.setter
    def last_updated_date(self, last_updated_date):
        """Sets the last_updated_date of this FormSummary.


        :param last_updated_date: The last_updated_date of this FormSummary.  # noqa: E501
        :type: datetime
        """

        self._last_updated_date = last_updated_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FormSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FormSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
