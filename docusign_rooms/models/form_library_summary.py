# coding: utf-8

"""
    DocuSign Rooms API - v2

    An API for an integrator to access the features of DocuSign Rooms  # noqa: E501

    OpenAPI spec version: v2
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class FormLibrarySummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'forms_library_id': 'str',
        'name': 'str',
        'form_count': 'int'
    }

    attribute_map = {
        'forms_library_id': 'formsLibraryId',
        'name': 'name',
        'form_count': 'formCount'
    }

    def __init__(self, forms_library_id=None, name=None, form_count=None):  # noqa: E501
        """FormLibrarySummary - a model defined in Swagger"""  # noqa: E501

        self._forms_library_id = None
        self._name = None
        self._form_count = None
        self.discriminator = None

        if forms_library_id is not None:
            self.forms_library_id = forms_library_id
        if name is not None:
            self.name = name
        if form_count is not None:
            self.form_count = form_count

    @property
    def forms_library_id(self):
        """Gets the forms_library_id of this FormLibrarySummary.  # noqa: E501


        :return: The forms_library_id of this FormLibrarySummary.  # noqa: E501
        :rtype: str
        """
        return self._forms_library_id

    @forms_library_id.setter
    def forms_library_id(self, forms_library_id):
        """Sets the forms_library_id of this FormLibrarySummary.


        :param forms_library_id: The forms_library_id of this FormLibrarySummary.  # noqa: E501
        :type: str
        """

        self._forms_library_id = forms_library_id

    @property
    def name(self):
        """Gets the name of this FormLibrarySummary.  # noqa: E501


        :return: The name of this FormLibrarySummary.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FormLibrarySummary.


        :param name: The name of this FormLibrarySummary.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def form_count(self):
        """Gets the form_count of this FormLibrarySummary.  # noqa: E501


        :return: The form_count of this FormLibrarySummary.  # noqa: E501
        :rtype: int
        """
        return self._form_count

    @form_count.setter
    def form_count(self, form_count):
        """Sets the form_count of this FormLibrarySummary.


        :param form_count: The form_count of this FormLibrarySummary.  # noqa: E501
        :type: int
        """

        self._form_count = form_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FormLibrarySummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FormLibrarySummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
