# coding: utf-8

"""
    DocuSign Rooms API - v2

    An API for an integrator to access the features of DocuSign Rooms  # noqa: E501

    OpenAPI spec version: v2
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TaskSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'task_id': 'int',
        'name': 'str',
        'requires_approval': 'bool',
        'due_date_type_id': 'str',
        'due_date_offset': 'int',
        'fixed_due_date': 'datetime',
        'owner_user_id': 'int',
        'completion_date': 'datetime',
        'approval_date': 'datetime',
        'rejected_date': 'datetime',
        'created_date': 'datetime',
        'is_document_task': 'bool',
        'requires_review': 'bool'
    }

    attribute_map = {
        'task_id': 'taskId',
        'name': 'name',
        'requires_approval': 'requiresApproval',
        'due_date_type_id': 'dueDateTypeId',
        'due_date_offset': 'dueDateOffset',
        'fixed_due_date': 'fixedDueDate',
        'owner_user_id': 'ownerUserId',
        'completion_date': 'completionDate',
        'approval_date': 'approvalDate',
        'rejected_date': 'rejectedDate',
        'created_date': 'createdDate',
        'is_document_task': 'isDocumentTask',
        'requires_review': 'requiresReview'
    }

    def __init__(self, task_id=None, name=None, requires_approval=None, due_date_type_id=None, due_date_offset=None, fixed_due_date=None, owner_user_id=None, completion_date=None, approval_date=None, rejected_date=None, created_date=None, is_document_task=None, requires_review=None):  # noqa: E501
        """TaskSummary - a model defined in Swagger"""  # noqa: E501

        self._task_id = None
        self._name = None
        self._requires_approval = None
        self._due_date_type_id = None
        self._due_date_offset = None
        self._fixed_due_date = None
        self._owner_user_id = None
        self._completion_date = None
        self._approval_date = None
        self._rejected_date = None
        self._created_date = None
        self._is_document_task = None
        self._requires_review = None
        self.discriminator = None

        if task_id is not None:
            self.task_id = task_id
        if name is not None:
            self.name = name
        if requires_approval is not None:
            self.requires_approval = requires_approval
        if due_date_type_id is not None:
            self.due_date_type_id = due_date_type_id
        if due_date_offset is not None:
            self.due_date_offset = due_date_offset
        if fixed_due_date is not None:
            self.fixed_due_date = fixed_due_date
        if owner_user_id is not None:
            self.owner_user_id = owner_user_id
        if completion_date is not None:
            self.completion_date = completion_date
        if approval_date is not None:
            self.approval_date = approval_date
        if rejected_date is not None:
            self.rejected_date = rejected_date
        if created_date is not None:
            self.created_date = created_date
        if is_document_task is not None:
            self.is_document_task = is_document_task
        if requires_review is not None:
            self.requires_review = requires_review

    @property
    def task_id(self):
        """Gets the task_id of this TaskSummary.  # noqa: E501


        :return: The task_id of this TaskSummary.  # noqa: E501
        :rtype: int
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this TaskSummary.


        :param task_id: The task_id of this TaskSummary.  # noqa: E501
        :type: int
        """

        self._task_id = task_id

    @property
    def name(self):
        """Gets the name of this TaskSummary.  # noqa: E501


        :return: The name of this TaskSummary.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TaskSummary.


        :param name: The name of this TaskSummary.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def requires_approval(self):
        """Gets the requires_approval of this TaskSummary.  # noqa: E501


        :return: The requires_approval of this TaskSummary.  # noqa: E501
        :rtype: bool
        """
        return self._requires_approval

    @requires_approval.setter
    def requires_approval(self, requires_approval):
        """Sets the requires_approval of this TaskSummary.


        :param requires_approval: The requires_approval of this TaskSummary.  # noqa: E501
        :type: bool
        """

        self._requires_approval = requires_approval

    @property
    def due_date_type_id(self):
        """Gets the due_date_type_id of this TaskSummary.  # noqa: E501


        :return: The due_date_type_id of this TaskSummary.  # noqa: E501
        :rtype: str
        """
        return self._due_date_type_id

    @due_date_type_id.setter
    def due_date_type_id(self, due_date_type_id):
        """Sets the due_date_type_id of this TaskSummary.


        :param due_date_type_id: The due_date_type_id of this TaskSummary.  # noqa: E501
        :type: str
        """

        self._due_date_type_id = due_date_type_id

    @property
    def due_date_offset(self):
        """Gets the due_date_offset of this TaskSummary.  # noqa: E501


        :return: The due_date_offset of this TaskSummary.  # noqa: E501
        :rtype: int
        """
        return self._due_date_offset

    @due_date_offset.setter
    def due_date_offset(self, due_date_offset):
        """Sets the due_date_offset of this TaskSummary.


        :param due_date_offset: The due_date_offset of this TaskSummary.  # noqa: E501
        :type: int
        """

        self._due_date_offset = due_date_offset

    @property
    def fixed_due_date(self):
        """Gets the fixed_due_date of this TaskSummary.  # noqa: E501


        :return: The fixed_due_date of this TaskSummary.  # noqa: E501
        :rtype: datetime
        """
        return self._fixed_due_date

    @fixed_due_date.setter
    def fixed_due_date(self, fixed_due_date):
        """Sets the fixed_due_date of this TaskSummary.


        :param fixed_due_date: The fixed_due_date of this TaskSummary.  # noqa: E501
        :type: datetime
        """

        self._fixed_due_date = fixed_due_date

    @property
    def owner_user_id(self):
        """Gets the owner_user_id of this TaskSummary.  # noqa: E501


        :return: The owner_user_id of this TaskSummary.  # noqa: E501
        :rtype: int
        """
        return self._owner_user_id

    @owner_user_id.setter
    def owner_user_id(self, owner_user_id):
        """Sets the owner_user_id of this TaskSummary.


        :param owner_user_id: The owner_user_id of this TaskSummary.  # noqa: E501
        :type: int
        """

        self._owner_user_id = owner_user_id

    @property
    def completion_date(self):
        """Gets the completion_date of this TaskSummary.  # noqa: E501


        :return: The completion_date of this TaskSummary.  # noqa: E501
        :rtype: datetime
        """
        return self._completion_date

    @completion_date.setter
    def completion_date(self, completion_date):
        """Sets the completion_date of this TaskSummary.


        :param completion_date: The completion_date of this TaskSummary.  # noqa: E501
        :type: datetime
        """

        self._completion_date = completion_date

    @property
    def approval_date(self):
        """Gets the approval_date of this TaskSummary.  # noqa: E501


        :return: The approval_date of this TaskSummary.  # noqa: E501
        :rtype: datetime
        """
        return self._approval_date

    @approval_date.setter
    def approval_date(self, approval_date):
        """Sets the approval_date of this TaskSummary.


        :param approval_date: The approval_date of this TaskSummary.  # noqa: E501
        :type: datetime
        """

        self._approval_date = approval_date

    @property
    def rejected_date(self):
        """Gets the rejected_date of this TaskSummary.  # noqa: E501


        :return: The rejected_date of this TaskSummary.  # noqa: E501
        :rtype: datetime
        """
        return self._rejected_date

    @rejected_date.setter
    def rejected_date(self, rejected_date):
        """Sets the rejected_date of this TaskSummary.


        :param rejected_date: The rejected_date of this TaskSummary.  # noqa: E501
        :type: datetime
        """

        self._rejected_date = rejected_date

    @property
    def created_date(self):
        """Gets the created_date of this TaskSummary.  # noqa: E501


        :return: The created_date of this TaskSummary.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this TaskSummary.


        :param created_date: The created_date of this TaskSummary.  # noqa: E501
        :type: datetime
        """

        self._created_date = created_date

    @property
    def is_document_task(self):
        """Gets the is_document_task of this TaskSummary.  # noqa: E501


        :return: The is_document_task of this TaskSummary.  # noqa: E501
        :rtype: bool
        """
        return self._is_document_task

    @is_document_task.setter
    def is_document_task(self, is_document_task):
        """Sets the is_document_task of this TaskSummary.


        :param is_document_task: The is_document_task of this TaskSummary.  # noqa: E501
        :type: bool
        """

        self._is_document_task = is_document_task

    @property
    def requires_review(self):
        """Gets the requires_review of this TaskSummary.  # noqa: E501


        :return: The requires_review of this TaskSummary.  # noqa: E501
        :rtype: bool
        """
        return self._requires_review

    @requires_review.setter
    def requires_review(self, requires_review):
        """Sets the requires_review of this TaskSummary.


        :param requires_review: The requires_review of this TaskSummary.  # noqa: E501
        :type: bool
        """

        self._requires_review = requires_review

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaskSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
