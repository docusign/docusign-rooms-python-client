# coding: utf-8

"""
    DocuSign Rooms API - v2

    An API for an integrator to access the features of DocuSign Rooms  # noqa: E501

    OpenAPI spec version: v2
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_rooms.client.configuration import Configuration


class RoomForCreate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'role_id': 'int',
        'transaction_side_id': 'str',
        'owner_id': 'int',
        'template_id': 'int',
        'office_id': 'int',
        'field_data': 'FieldDataForCreate',
        'listing_source': 'str'
    }

    attribute_map = {
        'name': 'name',
        'role_id': 'roleId',
        'transaction_side_id': 'transactionSideId',
        'owner_id': 'ownerId',
        'template_id': 'templateId',
        'office_id': 'officeId',
        'field_data': 'fieldData',
        'listing_source': 'listingSource'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """RoomForCreate - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._role_id = None
        self._transaction_side_id = None
        self._owner_id = None
        self._template_id = None
        self._office_id = None
        self._field_data = None
        self._listing_source = None
        self.discriminator = None

        setattr(self, "_{}".format('name'), kwargs.get('name', None))
        setattr(self, "_{}".format('role_id'), kwargs.get('role_id', None))
        setattr(self, "_{}".format('transaction_side_id'), kwargs.get('transaction_side_id', None))
        setattr(self, "_{}".format('owner_id'), kwargs.get('owner_id', None))
        setattr(self, "_{}".format('template_id'), kwargs.get('template_id', None))
        setattr(self, "_{}".format('office_id'), kwargs.get('office_id', None))
        setattr(self, "_{}".format('field_data'), kwargs.get('field_data', None))
        setattr(self, "_{}".format('listing_source'), kwargs.get('listing_source', None))

    @property
    def name(self):
        """Gets the name of this RoomForCreate.  # noqa: E501


        :return: The name of this RoomForCreate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RoomForCreate.


        :param name: The name of this RoomForCreate.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def role_id(self):
        """Gets the role_id of this RoomForCreate.  # noqa: E501


        :return: The role_id of this RoomForCreate.  # noqa: E501
        :rtype: int
        """
        return self._role_id

    @role_id.setter
    def role_id(self, role_id):
        """Sets the role_id of this RoomForCreate.


        :param role_id: The role_id of this RoomForCreate.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and role_id is None:
            raise ValueError("Invalid value for `role_id`, must not be `None`")  # noqa: E501

        self._role_id = role_id

    @property
    def transaction_side_id(self):
        """Gets the transaction_side_id of this RoomForCreate.  # noqa: E501

        Required for a real estate company; otherwise ignored.  # noqa: E501

        :return: The transaction_side_id of this RoomForCreate.  # noqa: E501
        :rtype: str
        """
        return self._transaction_side_id

    @transaction_side_id.setter
    def transaction_side_id(self, transaction_side_id):
        """Sets the transaction_side_id of this RoomForCreate.

        Required for a real estate company; otherwise ignored.  # noqa: E501

        :param transaction_side_id: The transaction_side_id of this RoomForCreate.  # noqa: E501
        :type: str
        """

        self._transaction_side_id = transaction_side_id

    @property
    def owner_id(self):
        """Gets the owner_id of this RoomForCreate.  # noqa: E501


        :return: The owner_id of this RoomForCreate.  # noqa: E501
        :rtype: int
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this RoomForCreate.


        :param owner_id: The owner_id of this RoomForCreate.  # noqa: E501
        :type: int
        """

        self._owner_id = owner_id

    @property
    def template_id(self):
        """Gets the template_id of this RoomForCreate.  # noqa: E501


        :return: The template_id of this RoomForCreate.  # noqa: E501
        :rtype: int
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """Sets the template_id of this RoomForCreate.


        :param template_id: The template_id of this RoomForCreate.  # noqa: E501
        :type: int
        """

        self._template_id = template_id

    @property
    def office_id(self):
        """Gets the office_id of this RoomForCreate.  # noqa: E501


        :return: The office_id of this RoomForCreate.  # noqa: E501
        :rtype: int
        """
        return self._office_id

    @office_id.setter
    def office_id(self, office_id):
        """Sets the office_id of this RoomForCreate.


        :param office_id: The office_id of this RoomForCreate.  # noqa: E501
        :type: int
        """

        self._office_id = office_id

    @property
    def field_data(self):
        """Gets the field_data of this RoomForCreate.  # noqa: E501


        :return: The field_data of this RoomForCreate.  # noqa: E501
        :rtype: FieldDataForCreate
        """
        return self._field_data

    @field_data.setter
    def field_data(self, field_data):
        """Sets the field_data of this RoomForCreate.


        :param field_data: The field_data of this RoomForCreate.  # noqa: E501
        :type: FieldDataForCreate
        """

        self._field_data = field_data

    @property
    def listing_source(self):
        """Gets the listing_source of this RoomForCreate.  # noqa: E501


        :return: The listing_source of this RoomForCreate.  # noqa: E501
        :rtype: str
        """
        return self._listing_source

    @listing_source.setter
    def listing_source(self, listing_source):
        """Sets the listing_source of this RoomForCreate.


        :param listing_source: The listing_source of this RoomForCreate.  # noqa: E501
        :type: str
        """
        allowed_values = ["PublicRecords", "MLS"]  # noqa: E501
        if (self._configuration.client_side_validation and
                listing_source not in allowed_values):
            raise ValueError(
                "Invalid value for `listing_source` ({0}), must be one of {1}"  # noqa: E501
                .format(listing_source, allowed_values)
            )

        self._listing_source = listing_source

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RoomForCreate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RoomForCreate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RoomForCreate):
            return True

        return self.to_dict() != other.to_dict()
