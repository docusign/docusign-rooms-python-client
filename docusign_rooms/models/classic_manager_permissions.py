# coding: utf-8

"""
    DocuSign Rooms API - v2

    An API for an integrator to access the features of DocuSign Rooms  # noqa: E501

    OpenAPI spec version: v2
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ClassicManagerPermissions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_visible_in_transaction_rooms': 'bool',
        'can_delete_company_rooms': 'bool',
        'can_delete_company_documents': 'bool',
        'can_manage_company_rooms': 'bool',
        'can_manage_company_account': 'bool',
        'can_manage_company_shared_library': 'bool',
        'can_manage_company_members': 'bool',
        'can_close_company_rooms': 'bool',
        'can_approve_company_checklists': 'bool',
        'is_company_system_admin': 'bool',
        'is_region_manager': 'bool',
        'is_office_manager': 'bool',
        'auto_access_to_company_rooms': 'bool'
    }

    attribute_map = {
        'is_visible_in_transaction_rooms': 'isVisibleInTransactionRooms',
        'can_delete_company_rooms': 'canDeleteCompanyRooms',
        'can_delete_company_documents': 'canDeleteCompanyDocuments',
        'can_manage_company_rooms': 'canManageCompanyRooms',
        'can_manage_company_account': 'canManageCompanyAccount',
        'can_manage_company_shared_library': 'canManageCompanySharedLibrary',
        'can_manage_company_members': 'canManageCompanyMembers',
        'can_close_company_rooms': 'canCloseCompanyRooms',
        'can_approve_company_checklists': 'canApproveCompanyChecklists',
        'is_company_system_admin': 'isCompanySystemAdmin',
        'is_region_manager': 'isRegionManager',
        'is_office_manager': 'isOfficeManager',
        'auto_access_to_company_rooms': 'autoAccessToCompanyRooms'
    }

    def __init__(self, is_visible_in_transaction_rooms=None, can_delete_company_rooms=None, can_delete_company_documents=None, can_manage_company_rooms=None, can_manage_company_account=None, can_manage_company_shared_library=None, can_manage_company_members=None, can_close_company_rooms=None, can_approve_company_checklists=None, is_company_system_admin=None, is_region_manager=None, is_office_manager=None, auto_access_to_company_rooms=None):  # noqa: E501
        """ClassicManagerPermissions - a model defined in Swagger"""  # noqa: E501

        self._is_visible_in_transaction_rooms = None
        self._can_delete_company_rooms = None
        self._can_delete_company_documents = None
        self._can_manage_company_rooms = None
        self._can_manage_company_account = None
        self._can_manage_company_shared_library = None
        self._can_manage_company_members = None
        self._can_close_company_rooms = None
        self._can_approve_company_checklists = None
        self._is_company_system_admin = None
        self._is_region_manager = None
        self._is_office_manager = None
        self._auto_access_to_company_rooms = None
        self.discriminator = None

        if is_visible_in_transaction_rooms is not None:
            self.is_visible_in_transaction_rooms = is_visible_in_transaction_rooms
        if can_delete_company_rooms is not None:
            self.can_delete_company_rooms = can_delete_company_rooms
        if can_delete_company_documents is not None:
            self.can_delete_company_documents = can_delete_company_documents
        if can_manage_company_rooms is not None:
            self.can_manage_company_rooms = can_manage_company_rooms
        if can_manage_company_account is not None:
            self.can_manage_company_account = can_manage_company_account
        if can_manage_company_shared_library is not None:
            self.can_manage_company_shared_library = can_manage_company_shared_library
        if can_manage_company_members is not None:
            self.can_manage_company_members = can_manage_company_members
        if can_close_company_rooms is not None:
            self.can_close_company_rooms = can_close_company_rooms
        if can_approve_company_checklists is not None:
            self.can_approve_company_checklists = can_approve_company_checklists
        if is_company_system_admin is not None:
            self.is_company_system_admin = is_company_system_admin
        if is_region_manager is not None:
            self.is_region_manager = is_region_manager
        if is_office_manager is not None:
            self.is_office_manager = is_office_manager
        if auto_access_to_company_rooms is not None:
            self.auto_access_to_company_rooms = auto_access_to_company_rooms

    @property
    def is_visible_in_transaction_rooms(self):
        """Gets the is_visible_in_transaction_rooms of this ClassicManagerPermissions.  # noqa: E501


        :return: The is_visible_in_transaction_rooms of this ClassicManagerPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._is_visible_in_transaction_rooms

    @is_visible_in_transaction_rooms.setter
    def is_visible_in_transaction_rooms(self, is_visible_in_transaction_rooms):
        """Sets the is_visible_in_transaction_rooms of this ClassicManagerPermissions.


        :param is_visible_in_transaction_rooms: The is_visible_in_transaction_rooms of this ClassicManagerPermissions.  # noqa: E501
        :type: bool
        """

        self._is_visible_in_transaction_rooms = is_visible_in_transaction_rooms

    @property
    def can_delete_company_rooms(self):
        """Gets the can_delete_company_rooms of this ClassicManagerPermissions.  # noqa: E501


        :return: The can_delete_company_rooms of this ClassicManagerPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._can_delete_company_rooms

    @can_delete_company_rooms.setter
    def can_delete_company_rooms(self, can_delete_company_rooms):
        """Sets the can_delete_company_rooms of this ClassicManagerPermissions.


        :param can_delete_company_rooms: The can_delete_company_rooms of this ClassicManagerPermissions.  # noqa: E501
        :type: bool
        """

        self._can_delete_company_rooms = can_delete_company_rooms

    @property
    def can_delete_company_documents(self):
        """Gets the can_delete_company_documents of this ClassicManagerPermissions.  # noqa: E501


        :return: The can_delete_company_documents of this ClassicManagerPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._can_delete_company_documents

    @can_delete_company_documents.setter
    def can_delete_company_documents(self, can_delete_company_documents):
        """Sets the can_delete_company_documents of this ClassicManagerPermissions.


        :param can_delete_company_documents: The can_delete_company_documents of this ClassicManagerPermissions.  # noqa: E501
        :type: bool
        """

        self._can_delete_company_documents = can_delete_company_documents

    @property
    def can_manage_company_rooms(self):
        """Gets the can_manage_company_rooms of this ClassicManagerPermissions.  # noqa: E501


        :return: The can_manage_company_rooms of this ClassicManagerPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._can_manage_company_rooms

    @can_manage_company_rooms.setter
    def can_manage_company_rooms(self, can_manage_company_rooms):
        """Sets the can_manage_company_rooms of this ClassicManagerPermissions.


        :param can_manage_company_rooms: The can_manage_company_rooms of this ClassicManagerPermissions.  # noqa: E501
        :type: bool
        """

        self._can_manage_company_rooms = can_manage_company_rooms

    @property
    def can_manage_company_account(self):
        """Gets the can_manage_company_account of this ClassicManagerPermissions.  # noqa: E501


        :return: The can_manage_company_account of this ClassicManagerPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._can_manage_company_account

    @can_manage_company_account.setter
    def can_manage_company_account(self, can_manage_company_account):
        """Sets the can_manage_company_account of this ClassicManagerPermissions.


        :param can_manage_company_account: The can_manage_company_account of this ClassicManagerPermissions.  # noqa: E501
        :type: bool
        """

        self._can_manage_company_account = can_manage_company_account

    @property
    def can_manage_company_shared_library(self):
        """Gets the can_manage_company_shared_library of this ClassicManagerPermissions.  # noqa: E501


        :return: The can_manage_company_shared_library of this ClassicManagerPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._can_manage_company_shared_library

    @can_manage_company_shared_library.setter
    def can_manage_company_shared_library(self, can_manage_company_shared_library):
        """Sets the can_manage_company_shared_library of this ClassicManagerPermissions.


        :param can_manage_company_shared_library: The can_manage_company_shared_library of this ClassicManagerPermissions.  # noqa: E501
        :type: bool
        """

        self._can_manage_company_shared_library = can_manage_company_shared_library

    @property
    def can_manage_company_members(self):
        """Gets the can_manage_company_members of this ClassicManagerPermissions.  # noqa: E501


        :return: The can_manage_company_members of this ClassicManagerPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._can_manage_company_members

    @can_manage_company_members.setter
    def can_manage_company_members(self, can_manage_company_members):
        """Sets the can_manage_company_members of this ClassicManagerPermissions.


        :param can_manage_company_members: The can_manage_company_members of this ClassicManagerPermissions.  # noqa: E501
        :type: bool
        """

        self._can_manage_company_members = can_manage_company_members

    @property
    def can_close_company_rooms(self):
        """Gets the can_close_company_rooms of this ClassicManagerPermissions.  # noqa: E501


        :return: The can_close_company_rooms of this ClassicManagerPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._can_close_company_rooms

    @can_close_company_rooms.setter
    def can_close_company_rooms(self, can_close_company_rooms):
        """Sets the can_close_company_rooms of this ClassicManagerPermissions.


        :param can_close_company_rooms: The can_close_company_rooms of this ClassicManagerPermissions.  # noqa: E501
        :type: bool
        """

        self._can_close_company_rooms = can_close_company_rooms

    @property
    def can_approve_company_checklists(self):
        """Gets the can_approve_company_checklists of this ClassicManagerPermissions.  # noqa: E501


        :return: The can_approve_company_checklists of this ClassicManagerPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._can_approve_company_checklists

    @can_approve_company_checklists.setter
    def can_approve_company_checklists(self, can_approve_company_checklists):
        """Sets the can_approve_company_checklists of this ClassicManagerPermissions.


        :param can_approve_company_checklists: The can_approve_company_checklists of this ClassicManagerPermissions.  # noqa: E501
        :type: bool
        """

        self._can_approve_company_checklists = can_approve_company_checklists

    @property
    def is_company_system_admin(self):
        """Gets the is_company_system_admin of this ClassicManagerPermissions.  # noqa: E501


        :return: The is_company_system_admin of this ClassicManagerPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._is_company_system_admin

    @is_company_system_admin.setter
    def is_company_system_admin(self, is_company_system_admin):
        """Sets the is_company_system_admin of this ClassicManagerPermissions.


        :param is_company_system_admin: The is_company_system_admin of this ClassicManagerPermissions.  # noqa: E501
        :type: bool
        """

        self._is_company_system_admin = is_company_system_admin

    @property
    def is_region_manager(self):
        """Gets the is_region_manager of this ClassicManagerPermissions.  # noqa: E501


        :return: The is_region_manager of this ClassicManagerPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._is_region_manager

    @is_region_manager.setter
    def is_region_manager(self, is_region_manager):
        """Sets the is_region_manager of this ClassicManagerPermissions.


        :param is_region_manager: The is_region_manager of this ClassicManagerPermissions.  # noqa: E501
        :type: bool
        """

        self._is_region_manager = is_region_manager

    @property
    def is_office_manager(self):
        """Gets the is_office_manager of this ClassicManagerPermissions.  # noqa: E501


        :return: The is_office_manager of this ClassicManagerPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._is_office_manager

    @is_office_manager.setter
    def is_office_manager(self, is_office_manager):
        """Sets the is_office_manager of this ClassicManagerPermissions.


        :param is_office_manager: The is_office_manager of this ClassicManagerPermissions.  # noqa: E501
        :type: bool
        """

        self._is_office_manager = is_office_manager

    @property
    def auto_access_to_company_rooms(self):
        """Gets the auto_access_to_company_rooms of this ClassicManagerPermissions.  # noqa: E501


        :return: The auto_access_to_company_rooms of this ClassicManagerPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._auto_access_to_company_rooms

    @auto_access_to_company_rooms.setter
    def auto_access_to_company_rooms(self, auto_access_to_company_rooms):
        """Sets the auto_access_to_company_rooms of this ClassicManagerPermissions.


        :param auto_access_to_company_rooms: The auto_access_to_company_rooms of this ClassicManagerPermissions.  # noqa: E501
        :type: bool
        """

        self._auto_access_to_company_rooms = auto_access_to_company_rooms

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClassicManagerPermissions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClassicManagerPermissions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
