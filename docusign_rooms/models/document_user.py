# coding: utf-8

"""
    DocuSign Rooms API - v2

    An API for an integrator to access the features of DocuSign Rooms  # noqa: E501

    OpenAPI spec version: v2
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DocumentUser(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_id': 'int',
        'document_id': 'int',
        'name': 'str',
        'has_access': 'bool',
        'can_approve_task': 'bool',
        'can_assign_to_task_list': 'bool',
        'can_copy': 'bool',
        'can_delete': 'bool',
        'can_remove_from_task_list': 'bool',
        'can_remove_approval': 'bool',
        'can_rename': 'bool',
        'can_share': 'bool',
        'can_view_activity': 'bool'
    }

    attribute_map = {
        'user_id': 'userId',
        'document_id': 'documentId',
        'name': 'name',
        'has_access': 'hasAccess',
        'can_approve_task': 'canApproveTask',
        'can_assign_to_task_list': 'canAssignToTaskList',
        'can_copy': 'canCopy',
        'can_delete': 'canDelete',
        'can_remove_from_task_list': 'canRemoveFromTaskList',
        'can_remove_approval': 'canRemoveApproval',
        'can_rename': 'canRename',
        'can_share': 'canShare',
        'can_view_activity': 'canViewActivity'
    }

    def __init__(self, user_id=None, document_id=None, name=None, has_access=None, can_approve_task=None, can_assign_to_task_list=None, can_copy=None, can_delete=None, can_remove_from_task_list=None, can_remove_approval=None, can_rename=None, can_share=None, can_view_activity=None):  # noqa: E501
        """DocumentUser - a model defined in Swagger"""  # noqa: E501

        self._user_id = None
        self._document_id = None
        self._name = None
        self._has_access = None
        self._can_approve_task = None
        self._can_assign_to_task_list = None
        self._can_copy = None
        self._can_delete = None
        self._can_remove_from_task_list = None
        self._can_remove_approval = None
        self._can_rename = None
        self._can_share = None
        self._can_view_activity = None
        self.discriminator = None

        if user_id is not None:
            self.user_id = user_id
        if document_id is not None:
            self.document_id = document_id
        if name is not None:
            self.name = name
        if has_access is not None:
            self.has_access = has_access
        if can_approve_task is not None:
            self.can_approve_task = can_approve_task
        if can_assign_to_task_list is not None:
            self.can_assign_to_task_list = can_assign_to_task_list
        if can_copy is not None:
            self.can_copy = can_copy
        if can_delete is not None:
            self.can_delete = can_delete
        if can_remove_from_task_list is not None:
            self.can_remove_from_task_list = can_remove_from_task_list
        if can_remove_approval is not None:
            self.can_remove_approval = can_remove_approval
        if can_rename is not None:
            self.can_rename = can_rename
        if can_share is not None:
            self.can_share = can_share
        if can_view_activity is not None:
            self.can_view_activity = can_view_activity

    @property
    def user_id(self):
        """Gets the user_id of this DocumentUser.  # noqa: E501


        :return: The user_id of this DocumentUser.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this DocumentUser.


        :param user_id: The user_id of this DocumentUser.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def document_id(self):
        """Gets the document_id of this DocumentUser.  # noqa: E501


        :return: The document_id of this DocumentUser.  # noqa: E501
        :rtype: int
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this DocumentUser.


        :param document_id: The document_id of this DocumentUser.  # noqa: E501
        :type: int
        """

        self._document_id = document_id

    @property
    def name(self):
        """Gets the name of this DocumentUser.  # noqa: E501


        :return: The name of this DocumentUser.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DocumentUser.


        :param name: The name of this DocumentUser.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def has_access(self):
        """Gets the has_access of this DocumentUser.  # noqa: E501


        :return: The has_access of this DocumentUser.  # noqa: E501
        :rtype: bool
        """
        return self._has_access

    @has_access.setter
    def has_access(self, has_access):
        """Sets the has_access of this DocumentUser.


        :param has_access: The has_access of this DocumentUser.  # noqa: E501
        :type: bool
        """

        self._has_access = has_access

    @property
    def can_approve_task(self):
        """Gets the can_approve_task of this DocumentUser.  # noqa: E501


        :return: The can_approve_task of this DocumentUser.  # noqa: E501
        :rtype: bool
        """
        return self._can_approve_task

    @can_approve_task.setter
    def can_approve_task(self, can_approve_task):
        """Sets the can_approve_task of this DocumentUser.


        :param can_approve_task: The can_approve_task of this DocumentUser.  # noqa: E501
        :type: bool
        """

        self._can_approve_task = can_approve_task

    @property
    def can_assign_to_task_list(self):
        """Gets the can_assign_to_task_list of this DocumentUser.  # noqa: E501


        :return: The can_assign_to_task_list of this DocumentUser.  # noqa: E501
        :rtype: bool
        """
        return self._can_assign_to_task_list

    @can_assign_to_task_list.setter
    def can_assign_to_task_list(self, can_assign_to_task_list):
        """Sets the can_assign_to_task_list of this DocumentUser.


        :param can_assign_to_task_list: The can_assign_to_task_list of this DocumentUser.  # noqa: E501
        :type: bool
        """

        self._can_assign_to_task_list = can_assign_to_task_list

    @property
    def can_copy(self):
        """Gets the can_copy of this DocumentUser.  # noqa: E501


        :return: The can_copy of this DocumentUser.  # noqa: E501
        :rtype: bool
        """
        return self._can_copy

    @can_copy.setter
    def can_copy(self, can_copy):
        """Sets the can_copy of this DocumentUser.


        :param can_copy: The can_copy of this DocumentUser.  # noqa: E501
        :type: bool
        """

        self._can_copy = can_copy

    @property
    def can_delete(self):
        """Gets the can_delete of this DocumentUser.  # noqa: E501


        :return: The can_delete of this DocumentUser.  # noqa: E501
        :rtype: bool
        """
        return self._can_delete

    @can_delete.setter
    def can_delete(self, can_delete):
        """Sets the can_delete of this DocumentUser.


        :param can_delete: The can_delete of this DocumentUser.  # noqa: E501
        :type: bool
        """

        self._can_delete = can_delete

    @property
    def can_remove_from_task_list(self):
        """Gets the can_remove_from_task_list of this DocumentUser.  # noqa: E501


        :return: The can_remove_from_task_list of this DocumentUser.  # noqa: E501
        :rtype: bool
        """
        return self._can_remove_from_task_list

    @can_remove_from_task_list.setter
    def can_remove_from_task_list(self, can_remove_from_task_list):
        """Sets the can_remove_from_task_list of this DocumentUser.


        :param can_remove_from_task_list: The can_remove_from_task_list of this DocumentUser.  # noqa: E501
        :type: bool
        """

        self._can_remove_from_task_list = can_remove_from_task_list

    @property
    def can_remove_approval(self):
        """Gets the can_remove_approval of this DocumentUser.  # noqa: E501


        :return: The can_remove_approval of this DocumentUser.  # noqa: E501
        :rtype: bool
        """
        return self._can_remove_approval

    @can_remove_approval.setter
    def can_remove_approval(self, can_remove_approval):
        """Sets the can_remove_approval of this DocumentUser.


        :param can_remove_approval: The can_remove_approval of this DocumentUser.  # noqa: E501
        :type: bool
        """

        self._can_remove_approval = can_remove_approval

    @property
    def can_rename(self):
        """Gets the can_rename of this DocumentUser.  # noqa: E501


        :return: The can_rename of this DocumentUser.  # noqa: E501
        :rtype: bool
        """
        return self._can_rename

    @can_rename.setter
    def can_rename(self, can_rename):
        """Sets the can_rename of this DocumentUser.


        :param can_rename: The can_rename of this DocumentUser.  # noqa: E501
        :type: bool
        """

        self._can_rename = can_rename

    @property
    def can_share(self):
        """Gets the can_share of this DocumentUser.  # noqa: E501


        :return: The can_share of this DocumentUser.  # noqa: E501
        :rtype: bool
        """
        return self._can_share

    @can_share.setter
    def can_share(self, can_share):
        """Sets the can_share of this DocumentUser.


        :param can_share: The can_share of this DocumentUser.  # noqa: E501
        :type: bool
        """

        self._can_share = can_share

    @property
    def can_view_activity(self):
        """Gets the can_view_activity of this DocumentUser.  # noqa: E501


        :return: The can_view_activity of this DocumentUser.  # noqa: E501
        :rtype: bool
        """
        return self._can_view_activity

    @can_view_activity.setter
    def can_view_activity(self, can_view_activity):
        """Sets the can_view_activity of this DocumentUser.


        :param can_view_activity: The can_view_activity of this DocumentUser.  # noqa: E501
        :type: bool
        """

        self._can_view_activity = can_view_activity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DocumentUser, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocumentUser):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
