# coding: utf-8

"""
    DocuSign Rooms API - v2

    An API for an integrator to access the features of DocuSign Rooms  # noqa: E501

    OpenAPI spec version: v2
    Contact: devcenter@docusign.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from docusign_rooms.client.configuration import Configuration


class RoomDocument(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'document_id': 'int',
        'name': 'str',
        'owner_id': 'int',
        'size': 'int',
        'folder_id': 'int',
        'created_date': 'datetime',
        'is_signed': 'bool',
        'docu_sign_form_id': 'str',
        'is_archived': 'bool',
        'is_virtual': 'bool',
        'is_dynamic': 'bool',
        'owner': 'RoomDocumentOwner'
    }

    attribute_map = {
        'document_id': 'documentId',
        'name': 'name',
        'owner_id': 'ownerId',
        'size': 'size',
        'folder_id': 'folderId',
        'created_date': 'createdDate',
        'is_signed': 'isSigned',
        'docu_sign_form_id': 'docuSignFormId',
        'is_archived': 'isArchived',
        'is_virtual': 'isVirtual',
        'is_dynamic': 'isDynamic',
        'owner': 'owner'
    }

    def __init__(self, _configuration=None, **kwargs):  # noqa: E501
        """RoomDocument - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._document_id = None
        self._name = None
        self._owner_id = None
        self._size = None
        self._folder_id = None
        self._created_date = None
        self._is_signed = None
        self._docu_sign_form_id = None
        self._is_archived = None
        self._is_virtual = None
        self._is_dynamic = None
        self._owner = None
        self.discriminator = None

        setattr(self, "_{}".format('document_id'), kwargs.get('document_id', None))
        setattr(self, "_{}".format('name'), kwargs.get('name', None))
        setattr(self, "_{}".format('owner_id'), kwargs.get('owner_id', None))
        setattr(self, "_{}".format('size'), kwargs.get('size', None))
        setattr(self, "_{}".format('folder_id'), kwargs.get('folder_id', None))
        setattr(self, "_{}".format('created_date'), kwargs.get('created_date', None))
        setattr(self, "_{}".format('is_signed'), kwargs.get('is_signed', None))
        setattr(self, "_{}".format('docu_sign_form_id'), kwargs.get('docu_sign_form_id', None))
        setattr(self, "_{}".format('is_archived'), kwargs.get('is_archived', None))
        setattr(self, "_{}".format('is_virtual'), kwargs.get('is_virtual', None))
        setattr(self, "_{}".format('is_dynamic'), kwargs.get('is_dynamic', None))
        setattr(self, "_{}".format('owner'), kwargs.get('owner', None))

    @property
    def document_id(self):
        """Gets the document_id of this RoomDocument.  # noqa: E501


        :return: The document_id of this RoomDocument.  # noqa: E501
        :rtype: int
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this RoomDocument.


        :param document_id: The document_id of this RoomDocument.  # noqa: E501
        :type: int
        """

        self._document_id = document_id

    @property
    def name(self):
        """Gets the name of this RoomDocument.  # noqa: E501


        :return: The name of this RoomDocument.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RoomDocument.


        :param name: The name of this RoomDocument.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def owner_id(self):
        """Gets the owner_id of this RoomDocument.  # noqa: E501


        :return: The owner_id of this RoomDocument.  # noqa: E501
        :rtype: int
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this RoomDocument.


        :param owner_id: The owner_id of this RoomDocument.  # noqa: E501
        :type: int
        """

        self._owner_id = owner_id

    @property
    def size(self):
        """Gets the size of this RoomDocument.  # noqa: E501


        :return: The size of this RoomDocument.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this RoomDocument.


        :param size: The size of this RoomDocument.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def folder_id(self):
        """Gets the folder_id of this RoomDocument.  # noqa: E501


        :return: The folder_id of this RoomDocument.  # noqa: E501
        :rtype: int
        """
        return self._folder_id

    @folder_id.setter
    def folder_id(self, folder_id):
        """Sets the folder_id of this RoomDocument.


        :param folder_id: The folder_id of this RoomDocument.  # noqa: E501
        :type: int
        """

        self._folder_id = folder_id

    @property
    def created_date(self):
        """Gets the created_date of this RoomDocument.  # noqa: E501


        :return: The created_date of this RoomDocument.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this RoomDocument.


        :param created_date: The created_date of this RoomDocument.  # noqa: E501
        :type: datetime
        """

        self._created_date = created_date

    @property
    def is_signed(self):
        """Gets the is_signed of this RoomDocument.  # noqa: E501


        :return: The is_signed of this RoomDocument.  # noqa: E501
        :rtype: bool
        """
        return self._is_signed

    @is_signed.setter
    def is_signed(self, is_signed):
        """Sets the is_signed of this RoomDocument.


        :param is_signed: The is_signed of this RoomDocument.  # noqa: E501
        :type: bool
        """

        self._is_signed = is_signed

    @property
    def docu_sign_form_id(self):
        """Gets the docu_sign_form_id of this RoomDocument.  # noqa: E501


        :return: The docu_sign_form_id of this RoomDocument.  # noqa: E501
        :rtype: str
        """
        return self._docu_sign_form_id

    @docu_sign_form_id.setter
    def docu_sign_form_id(self, docu_sign_form_id):
        """Sets the docu_sign_form_id of this RoomDocument.


        :param docu_sign_form_id: The docu_sign_form_id of this RoomDocument.  # noqa: E501
        :type: str
        """

        self._docu_sign_form_id = docu_sign_form_id

    @property
    def is_archived(self):
        """Gets the is_archived of this RoomDocument.  # noqa: E501


        :return: The is_archived of this RoomDocument.  # noqa: E501
        :rtype: bool
        """
        return self._is_archived

    @is_archived.setter
    def is_archived(self, is_archived):
        """Sets the is_archived of this RoomDocument.


        :param is_archived: The is_archived of this RoomDocument.  # noqa: E501
        :type: bool
        """

        self._is_archived = is_archived

    @property
    def is_virtual(self):
        """Gets the is_virtual of this RoomDocument.  # noqa: E501


        :return: The is_virtual of this RoomDocument.  # noqa: E501
        :rtype: bool
        """
        return self._is_virtual

    @is_virtual.setter
    def is_virtual(self, is_virtual):
        """Sets the is_virtual of this RoomDocument.


        :param is_virtual: The is_virtual of this RoomDocument.  # noqa: E501
        :type: bool
        """

        self._is_virtual = is_virtual

    @property
    def is_dynamic(self):
        """Gets the is_dynamic of this RoomDocument.  # noqa: E501


        :return: The is_dynamic of this RoomDocument.  # noqa: E501
        :rtype: bool
        """
        return self._is_dynamic

    @is_dynamic.setter
    def is_dynamic(self, is_dynamic):
        """Sets the is_dynamic of this RoomDocument.


        :param is_dynamic: The is_dynamic of this RoomDocument.  # noqa: E501
        :type: bool
        """

        self._is_dynamic = is_dynamic

    @property
    def owner(self):
        """Gets the owner of this RoomDocument.  # noqa: E501


        :return: The owner of this RoomDocument.  # noqa: E501
        :rtype: RoomDocumentOwner
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this RoomDocument.


        :param owner: The owner of this RoomDocument.  # noqa: E501
        :type: RoomDocumentOwner
        """

        self._owner = owner

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RoomDocument, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RoomDocument):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RoomDocument):
            return True

        return self.to_dict() != other.to_dict()
